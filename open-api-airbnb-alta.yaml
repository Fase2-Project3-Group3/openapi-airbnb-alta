openapi: 3.0.0
info:
  title: AirBNB Alta App Project
  description: |
    Dokumen Open API Aplikasi AirBNB Alta
  version: "1.0.0"
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license: 
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  # Added by API Auto Mocking Plugin
  - description: Base URL Server GCP
    url: http://54.179.170.113:8000
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/YUSNARSETIYADI150403/OPEN-API-DASHBOARD/1.0.0
  - description: BE servers
    url: https://{environment}.api.alta.id
    variables:
      environment:
        default: dev
        enum:
          - "dev"
          - "prod"
tags:
  - name: Auth
    description:  API mengelola fitur Auth
  - name: Users 
    description: API mengelola fitur User  
  - name: Properties
    description:  API mengelola fitur Property  
  - name: PropertyImages
    description:  API mengelola fitur Property Image
  - name: Comments
    description:  API mengelola fitur Comment
  - name: Bookings
    description:  API mengelola fitru Booking


paths:

### Endpoint Auth
  /auth:
    post:
      summary: "Login User"
      tags:
      - "Auth"
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: object
              properties:
                "email":
                  type: string
                "password":
                  type: string
            example:
              email: "budi123@gmail.com"
              password: "123"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "Login Success"
                data:
                  id: 1
                  full_name: "Budiman"
                  email: "budi123@gmail.com"
                  phone: "08912391239"
                  gender: "Male"
                  profile_image_url: "https://preview.keenthemes.com/metronic-v4/theme/assets/pages/media/profile/profile_user.jpg"
                  is_hosting: "yes"
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJleHAiOjE2NzAwMzYwMjcsInJvbGUiOiJ1c2VyIiwidXNlcklkIjoxfQ.pT-FmSraUUb8HY73ofYbbt3vFgbej0XaHP9VMas8Q44"
        "400" :
          $ref : "#/components/responses/400"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

### Endpoint Users
  /users:
    post:
      tags:
        - Users
      summary: "Create User" 
      description: "Register User with Role = User."
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/InsertUsersObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              phone: "08912391239"
              gender: "Male"
              file: "9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHxccGxocGxoYHCYgGxojHBsdHy8gJCgpLSwsGB4xNTAqNSYrLCkBCQoKDgwOGg8PGiklHx8pLCwpKSkpKSwpLCkpKSwpLCksKSwsLCkpKSkpLCkpKSwpLCwsKSwsLCksKSkpKSksKf/AABEIAJ0BQQMBIgACEQEDEQH/xAAcAAACAwEBAQEAAAAAAAAAAAAEBQIDBgEABwj/xABFEAACAQIEBAQDBgMGAwcFAAABAhEDIQAEEjEFQVFhBhMicTKBkRRCobHB8CNS0QcVM1Ni4RaS8TRygpOiwtIkQ1RVY//EABoBAAIDA."
            encoding:
              file:
                contentType: image/png, image/jpeg 
      responses:
        '201':
          description: "Success Create User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "User successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
  
  /users/{id}:
    get:
      tags:
        - Users
      summary: "Get User by Id"
      description: "Get data user using id user at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to get data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get User by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get User by Id"
                  data:
                    id: 1
                    full_name: "Budiman"
                    email: "budi123@gmail.com"
                    phone: "08912391239"
                    gender: "Male"
                    profile_image_url: "https://preview.keenthemes.com/metronic-v4/theme/assets/pages/media/profile/profile_user.jpg" 
                    is_hosting: "yes"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Users
      summary: "Update User"
      description: "Update User using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/EditUsersObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              phone: "08912391239"
              gender: "Male"
              file: "9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHxccGxocGxoYHCYgGxojHBsdHy8gJCgpLSwsGB4xNTAqNSYrLCkBCQoKDgwOGg8PGiklHx8pLCwpKSkpKSwpLCkpKSwpLCksKSwsLCkpKSkpLCkpKSwpLCwsKSwsLCksKSkpKSksKf/AABEIAJ0BQQMBIgACEQEDEQH/xAAcAAACAwEBAQEAAAAAAAAAAAAEBQIDBgEABwj/xABFEAACAQIEBAQDBgMGAwcFAAABAhEDIQAEEjEFQVFhBhMicTKBkRRCobHB8CNS0QcVM1Ni4RaS8TRygpOiwtIkQ1RVY//EABoBAAIDA."
            encoding:
              file:
                contentType: image/png, image/jpeg 
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update user."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Users
      summary: "Delete User"
      description: "Delete User using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id user to delete data."
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete User."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete user"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

### Endpoint Properties
  /properties:
    post:
      tags:
        - Properties
      summary: "Create Property" 
      description: "Create new property."
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/InsertPropertiesObject"
            example:
              property_name: "Budiman"
              price_per_night: "budi123@gmail.com"
              phone: "08912391239"
              description: "Male"
              address: "Male"
              city: "Male"
              contact_number: "Male"
              guest_capacity: "Male"
              facilities: "Male"
              booking_status: "Male"
              property_type: "Male"
              rating_average: "Male"
              user_id: "Male"
              file: "9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHxccGxocGxoYHCYgGxojHBsdHy8gJCgpLSwsGB4xNTAqNSYrLCkBCQoKDgwOGg8PGiklHx8pLCwpKSkpKSwpLCkpKSwpLCksKSwsLCkpKSkpLCkpKSwpLCwsKSwsLCksKSkpKSksKf/AABEIAJ0BQQMBIgACEQEDEQH/xAAcAAACAwEBAQEAAAAAAAAAAAAEBQIDBgEABwj/xABFEAACAQIEBAQDBgMGAwcFAAABAhEDIQAEEjEFQVFhBhMicTKBkRRCobHB8CNS0QcVM1Ni4RaS8TRygpOiwtIkQ1RVY//EABoBAAIDA."
            encoding:
              file:
                contentType: image/png, image/jpeg 
      responses:
        '201':
          description: "Success Create Properties"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "Properties successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    get:
      tags:
        - Properties
      summary: "Get All Properties"
      description: "Get All data properties."
      security:
        - JWTAuth: []
      parameters:
        - in: query
          name: "name"
          schema:
            type: string
        - in: query
          name: "status"
          schema:
            type: string
            enum:
            - Available
            - Non-Available 
        - in: query
          name: "Property Type"
          schema:
            type: string
            enum:
            - Guest
            - Apartement
            - GuestHouse
            - House
      responses:
        '200':
          description: "Success Get Property by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get Property by Id"
                  data:
                    id: 1
                    full_name: "Budiman"
                    email: "budi123@gmail.com"
                    phone: "08912391239"
                    gender: "Male"
                    profile_image_url: "https://preview.keenthemes.com/metronic-v4/theme/assets/pages/media/profile/profile_user.jpg" 
                    is_hosting: "yes"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
  
  /properties/{id}:
    get:
      tags:
        - Properties
      summary: "Get Properties by Id"
      description: "Get data properties using id properties at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id properties to get data"
          required: true
          in: path
          schema:
            description: "Id properties 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get Properties by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithData"
              example:
                  status: "Success"
                  message: "Success Get Properties by Id"
                  data:
                    id: 1
                    full_name: "Budiman"
                    email: "budi123@gmail.com"
                    phone: "08912391239"
                    gender: "Male"
                    profile_image_url: "https://preview.keenthemes.com/metronic-v4/theme/assets/pages/media/profile/profile_user.jpg" 
                    is_hosting: "yes"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Properties
      summary: "Update Property"
      description: "Update property using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id properties to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/EditUsersObject"
            example:
              full_name: "Budiman"
              email: "budi123@gmail.com"
              phone: "08912391239"
              gender: "Male"
              file: "9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHxccGxocGxoYHCYgGxojHBsdHy8gJCgpLSwsGB4xNTAqNSYrLCkBCQoKDgwOGg8PGiklHx8pLCwpKSkpKSwpLCkpKSwpLCksKSwsLCkpKSkpLCkpKSwpLCwsKSwsLCksKSkpKSksKf/AABEIAJ0BQQMBIgACEQEDEQH/xAAcAAACAwEBAQEAAAAAAAAAAAAEBQIDBgEABwj/xABFEAACAQIEBAQDBgMGAwcFAAABAhEDIQAEEjEFQVFhBhMicTKBkRRCobHB8CNS0QcVM1Ni4RaS8TRygpOiwtIkQ1RVY//EABoBAAIDA."
            encoding:
              file:
                contentType: image/png, image/jpeg 
      responses:
        '200':
          description: "Success update User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update property."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Properties
      summary: "Delete Property"
      description: "Delete Property using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id property to delete data."
          required: true
          in: path
          schema:
            description: "Id property 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete Property."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete property"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  ### Endpoint Property Images 
  /property_images:
    post:
      tags:
        - PropertyImages
      summary: "Add Property Images" 
      description: "Add new property Images."
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/InsertPropertyImagesObject"
            example:
              title : Nestled amongst the giant redwoods
              file: "9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHxccGxocGxoYHCYgGxojHBsdHy8gJCgpLSwsGB4xNTAqNSYrLCkBCQoKDgwOGg8PGiklHx8pLCwpKSkpKSwpLCkpKSwpLCksKSwsLCkpKSkpLCkpKSwpLCwsKSwsLCksKSkpKSksKf/AABEIAJ0BQQMBIgACEQEDEQH/xAAcAAACAwEBAQEAAAAAAAAAAAAEBQIDBgEABwj/xABFEAACAQIEBAQDBgMGAwcFAAABAhEDIQAEEjEFQVFhBhMicTKBkRRCobHB8CNS0QcVM1Ni4RaS8TRygpOiwtIkQ1RVY//EABoBAAIDA."
              properties_id: 1
            encoding:
              file:
                contentType: image/png, image/jpeg 
             
      responses:
        '201':
          description: "Success Add Property image"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "Properties successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
  
  /property_images/{id}:
    get:
      tags:
        - PropertyImages
      summary: "Get Property imagesby Id"
      description: "Get images from properties using id properties at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id properties images to get data"
          required: true
          in: path
          schema:
            description: "Id properties images 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Get Property images by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesArrayPropertyImagesResult"
              example:
                  status: "Success"
                  message: "Success Get Properties by Id"
                  data:
                    - id: 1
                      title: Nestled amongst the giant redwoods
                      properties_id: 1
                      file: "https://a0.muscache.com/im/pictures/83d8a770-d438-4de1-a4ea-53e72a490402.jpg?im_w=1200"
                    - id: 2
                      title: Relax in the hammock for 2 in the shade of giant redwoods.
                      properties_id: 1
                      file: "https://a0.muscache.com/im/pictures/8ed0bfa0-6df8-4f4f-ab96-cb670a2713df.jpg?im_w=1200"  
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - PropertyImages
      summary: "Update Property"
      description: "Update property using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id properties to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/EditPropertyImagesObject"
            example:
              title: Private guesthouse in the redwoods.
              properties_id: 1
              file: "9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAAkGBhQSERUUExQVFRUWGRwaGBgYGB0dGxkcHxccGxocGxoYHCYgGxojHBsdHy8gJCgpLSwsGB4xNTAqNSYrLCkBCQoKDgwOGg8PGiklHx8pLCwpKSkpKSwpLCkpKSwpLCksKSwsLCkpKSkpLCkpKSwpLCwsKSwsLCksKSkpKSksKf/AABEIAJ0BQQMBIgACEQEDEQH/xAAcAAACAwEBAQEAAAAAAAAAAAAEBQIDBgEABwj/xABFEAACAQIEBAQDBgMGAwcFAAABAhEDIQAEEjEFQVFhBhMicTKBkRRCobHB8CNS0QcVM1Ni4RaS8TRygpOiwtIkQ1RVY//EABoBAAIDA."
            encoding:
              file:
                contentType: image/png, image/jpeg 
      responses:
        '200':
          description: "Success update property images"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update property images."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - PropertyImages
      summary: "Delete Property Images"
      description: "Delete Property Images using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id property images to delete data."
          required: true
          in: path
          schema:
            description: "Id property images 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete Property Images."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete property images"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

  ### Endpoint Comments
  /comments:
    post:
      tags:
        - Comments
      summary: "Insert Comments" 
      description: "Insert new review for the property ."
      requestBody:
        required: true
        content:
         application/json:
            schema:
              $ref: "#/components/schemas/InsertCommentsObject"
            example:
              title: review hotel
              comment: its such a nice hotel and give me some extraordinary experience here. the food was delicious, the view was nice and the price so much affordable
              rating: 5
              user_id: 1
              property_id: 1
          
      responses:
        '201':
          description: "Success Insert new comment"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "Comments successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
  
  /comments/{id}:
    get:
      tags:
        - Comments
      summary: "Get Comments by Id"
      description: "Get review related to the properties using id properties at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id properties to get data"
          required: true
          in: path
          schema:
            description: "Id properties 1"
            type: integer
            example: 1

      responses:
        '200':
          description: "Success Get Comments Properties by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccesArrayCommentsResult"
              example:
                  status: "Success"
                  message: "Success GetComments Properties by Id"
                  data:
                    - id : 1
                      title : review hotel kencana
                      comment : hotel kencana was such a nice place and affordable price
                      rating: 5
                      user_name : Budi
                    - id : 2
                      title : review Kencana hotel
                      comment : mantap
                      rating: 4
                      user_name: Andi 

        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Comments
      summary: "Update Comments "
      description: "Update comments for the property using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id properties to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/EditCommentsObject"
            example:
              title: Review guesthouse bali
              comment: this is such a nice place to go, very very comfortable
              rating : 5
              user_id: 1
              property_id: 1
      responses:
        '200':
          description: "Success update Comments"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update Comment."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Comments
      summary: "Delete Comment"
      description: "Delete comment property using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id property to delete data."
          required: true
          in: path
          schema:
            description: "Id property 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete Property."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete property"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

### Endpoint Comments
  /bookings:
    post:
      tags:
        - Bookings
      summary: "Insert new booking " 
      description: "Insert new booking for the properties ."
      requestBody:
        required: true
        content:
         application/json:
            schema:
              $ref: "#/components/schemas/InsertBookingsObject"
            example:
              checkin_date: 2022-12-12
              checkout_date: 2022-12-15
              price_per_night: 1000000
          
      responses:
        '201':
          description: "Success Insert new booking"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData"
              example:
                status: "Success"
                message: "booking successfully created" 
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
  
  /bookings/{id}:
    get:
      tags:
        - Bookings
      summary: "Get booking history by Id"
      description: "Get booking history related to the properties using id properties at path parameter. Only return 1 data."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id properties to get data"
          required: true
          in: path
          schema:
            description: "Id properties 1"
            type: integer
            example: 1

      responses:
        '200':
          description: "Success Get booking history by Id"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessBookingsResult"
              example:
                  status: "Success"
                  message: "Success GetComments Properties by Id"
                  data:
                    - id : 1
                      checkin_date: 2022-10-10
                      checkout_date: 2022-10-13
                      price_per_night: 200000
                      gross_amount: 600000
                      booking_status: complete_payment
                      username: Budi
                      property_name: Hotel Melati
                    - id : 1
                      checkin_date: 2022-11-02
                      checkout_date: 2022-11-05
                      price_per_night: 500000
                      gross_amount: 1500000
                      booking_status: complete_payment
                      username: Budi
                      property_name: Hotel Melati

        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
    put:
      tags:
        - Bookings
      summary: "Update Booking property"
      description: "Update booking property using request body and using id for reference at path parameter."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id properties to update data"
          required: true
          in: path
          schema:
            description: "Id user 1"
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          "multipart/form-data":
            schema:
              $ref: "#/components/schemas/EditBookingsObject"
            example:
              checkin_date: 2022-12-12
              checkout_date: 2022-12-15
              price_per_night: 1000000
      responses:
        '200':
          description: "Success update Comments"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                  status: "Success"
                  message: "Success Update Comment."
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"

    delete:
      tags:
        - Bookings
      summary: "Delete Booking"
      description: "Delete booking using id at path parameter as reference."
      security:
        - JWTAuth: []
      parameters:
        - name: id
          description: "Id property to delete data."
          required: true
          in: path
          schema:
            description: "Id property 1"
            type: integer
            example: 1
      responses:
        '200':
          description: "Success Delete booking property."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseWithoutData" 
              example:
                status: "Success"
                message: "Success Delete property"
        "400" :
          $ref : "#/components/responses/400"  
        "401" :
          $ref : "#/components/responses/401"  
        "404" :
          $ref : "#/components/responses/404"  
        '500':
          $ref: "#/components/responses/500"
####################################
#  COMPONENTS
####################################
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT Token that generated after login."

  schemas:

### User Schemas
    "GetUsersObject":
      type: object
      properties:
        "id":
          type: integer
        "full_name":
          type: string
        "email":
          type: string
        "phone":
          type: string
        "gender":
          type: string
        "profile_image_url":
          type: string    
        "is_hosting":
          type: string    
    "ArrayUsersObj":
      type: array
      items :
        $ref: "#/components/schemas/GetUsersObject"
    "InsertUsersObject":
      type: object
      properties:
        "full_name":
          type: string
        "email":
          type: string
        "password":
          type: string
        "phone":
          type: string
        "gender":
          type: string
        "file":
          type: string  
          format: binary
    "EditUsersObject":
      type: object
      properties:
        "full_name":
          type: string
        "email":
          type: string
        "password":
          type: string
        "phone":
          type: string
        "gender":
          type: string
        "file":
          type: string  
          format: binary

### Property Schemas
    "GetPropertiesListObject":
      type: object
      properties:
        "id":
          type: integer
        "property_name":
          type: string
        "price_per_night":
          type: string     
        "city":
          type: string
        "facilities":
          type: string
        "rating_average":
          type: string
        "image_thumbnail_url":
          type: string
    "ArrayPropertiesListObj":
      type: array
      items :
        $ref: "#/components/schemas/GetPropertiesListObject"
    "GetPropertiesObject":
      type: object
      properties:
        "id":
          type: integer
        "property_name":
          type: string
        "price_per_night":
          type: string
        "description":
          type: string
        "address":
          type: string
        "city":
          type: string
        "contact_number":
          type: string
        "guest_capacity":
          type: string
        "facilities":
          type: string
        "booking_status":
          type: string
        "property_type":
          type: string
        "rating_average":
          type: string
        "image_thumbnail_url":
          type: string
        "user_id":
          type: integer
        "property_images":
          items:
            $ref: "#/components/schemas/ArrayPropertyImagesObj"  
        "comments":
          items:
            $ref: "#/components/schemas/ArrayCommentsObj"  
    "ArrayPropertiesObj":
      type: array
      items :
        $ref: "#/components/schemas/GetPropertiesObject"
    "InsertPropertiesObject":
      type: object
      properties:
        "property_name":
          type: string
        "price_per_night":
          type: string
        "description":
          type: string
        "address":
          type: string
        "city":
          type: string
        "contact_number":
          type: string
        "guest_capacity":
          type: string
        "facilities":
          type: string
        "booking_status":
          type: string
        "property_type":
          type: string
        "rating_average":
          type: string
        "image_thumbnail_url":
          type: string
        "user_id":
          type: integer
        "property_images":
          items:
            $ref: "#/components/schemas/ArrayPropertyImagesObj"  
        "comments":
          items:
            $ref: "#/components/schemas/ArrayCommentsObj"  
    "EditPropertiesObject":
      type: object
      properties:
        "id":
          type: integer
        "property_name":
          type: string
        "price_per_night":
          type: string
        "description":
          type: string
        "address":
          type: string
        "city":
          type: string
        "contact_number":
          type: string
        "guest_capacity":
          type: string
        "facilities":
          type: string
        "booking_status":
          type: string
        "property_type":
          type: string
        "rating_average":
          type: string
        "image_thumbnail_url":
          type: string
        "user_id":
          type: integer
        "property_images":
          items:
            $ref: "#/components/schemas/ArrayPropertyImagesObj"  
        "comments":
          items:
            $ref: "#/components/schemas/ArrayCommentsObj"  

### PropertyImages Schemas
    "GetPropertyImagesObject":
      type: object
      properties:
        "id":
          type: integer
        "title":
          type: string
        "image_url":
          type: string
        "property_id":
          type: integer
    "ArrayPropertyImagesObj":
      type: array
      items :
        $ref: "#/components/schemas/GetPropertyImagesObject"
    "InsertPropertyImagesObject":
      type: object
      properties:
        "title":
          type: string
        "file":
          type: string  
          format: binary
        "property_id":
          type: integer 
    "EditPropertyImagesObject":
      type: object
      properties:
        "title":
          type: string
        "file":
          type: string  
          format: binary
        "property_id":
          type: integer 

### Comments Schemas
    "GetCommentsObject":
      type: object
      properties:
        "id":
          type: integer
        "title":
          type: string
        "comment":
          type: string
        "rating":
          type: integer
        "created_at":
          type: string
        "updated_at":
          type: string
        "user_id":
          type: integer
        "property_id":
          type: integer
    "ArrayCommentsObj":
      type: array
      items :
        $ref: "#/components/schemas/GetCommentsObject"
    "InsertCommentsObject":
      type: object
      properties:
        "title":
          type: string
        "comment":
          type: string
        "rating":
          type: integer
        "created_at":
          type: string
        "updated_at":
          type: string
        "user_id":
          type: integer
        "property_id":
          type: integer
    "EditCommentsObject":
      type: object
      properties:
        "title":
          type: string
        "comment":
          type: string
        "rating":
          type: integer
        "created_at":
          type: string
        "updated_at":
          type: string
        "user_id":
          type: integer
        "property_id":
          type: integer

### Bookings Schemas
    "GetBookingsObject":
      type: object
      properties:
        "id":
          type: integer
        "checkin_date":
          type: string
        "checkout_date":
          type: string
        "price_per_night":
          type: integer
        "gross_ammount":
          type: string
        "booking_status":
          type: string
        "user_id":
          type: integer
        "property_id":
          type: integer
    "ArrayBookingsObj":
      type: array
      items :
        $ref: "#/components/schemas/GetBookingsObject"
    "InsertBookingsObject":
      type: object
      properties:
        "checkin_date":
          type: string
        "checkout_date":
          type: string
        "price_per_night":
          type: integer
        "gross_ammount":
          type: string
        "booking_status":
          type: string
        "user_id":
          type: integer
        "property_id":
          type: integer
    "EditBookingsObject":
      type: object
      properties:
        "checkin_date":
          type: string
        "checkout_date":
          type: string
        "price_per_night":
          type: integer
        "gross_ammount":
          type: string
        "booking_status":
          type: string
        "user_id":
          type: integer
        "property_id":
          type: integer

### Other Schemas
    "ResponseWithoutData":
      type: object
      properties:
        status:
          type: string
        message:
          type: string
    "ResponseWithData":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: object
    "SuccesArrayUsersResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayUsersObj"
    "SuccesArrayPropertiesResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayPropertiesObj" 
    "SuccesArrayPropertiesListResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayPropertiesListObj" 
    "SuccessPropertyImagesResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          $ref: "#/components/schemas/GetPropertyImagesObject" 
    "SuccesArrayPropertyImagesResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayPropertyImagesObj" 
    "SuccessCommentsResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          $ref: "#/components/schemas/GetCommentsObject" 
    "SuccesArrayCommentsResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayCommentsObj" 
    "SuccessBookingsResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          $ref: "#/components/schemas/GetBookingsObject" 
    "SuccesArrayBookingsResult":
      type: object
      properties:
        status:
          type: string
        message: 
          type: string
        data:
          type: array
          items : 
            $ref: "#/components/schemas/ArrayBookingsObj" 

### Responses Schemas
  responses:
    '200':
      description: "Success Process Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    '201':
      description: "Success Create Data"
      content:
        application/json:
          schema:
            type: object
            properties:
              message: 
                type: string
              data:
                type: object
    '400':
      description: "Wrong Request From User"
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. Please check your input."
    '401':
      description: "Authorization information is missing or invalid."
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. User not authorized for this request."
    '404':
      description: "Page not found or wrong url. Please check again."
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. User not authorized for this request."
    '500':
      description: "Error process on server"
      content:
        "application/json":
          schema:
            type: object
            properties:
              message:
                type: string
          example:
            message: "Process Failed. Please check server."